
  # Standardize the data:
  data {
    for ( j in 1:Nx ) {
      xm[j]  <- mean(x[,j])
      xsd[j] <-   sd(x[,j])
      for ( i in 1:Ntotal ) {
        zx[i,j] <- ( x[i,j] - xm[j] ) / xsd[j]
      }
    }
  }
  # Specify the model for standardized data:
  model {
    for ( i in 1:Ntotal ) {
      y[i] ~ dcat( pr[i,1:nYlevels] )
      pr[i,1] <- pnorm( thresh[1] , mu[i] , 1/Sigma^2 )
      for ( k in 2:(nYlevels-1) ) {
        pr[i,k] <- max( 0 ,  pnorm( thresh[ k ] , mu[i] , 1/Sigma^2 )
                           - pnorm( thresh[k-1] , mu[i] , 1/Sigma^2 ) )
      }
      pr[i,nYlevels] <- 1 - pnorm( thresh[nYlevels-1] , mu[i] , 1/Sigma^2 )
      mu[i] <- a0 + a1[x1[i]] + a2[x2[i]] + a3[x3[i]] + a4[x4[i]] + a5[x5[i]]
                 + a6[x6[i]] + a7[x7[i]] + a8[x8[i]] + a9[x9[i]] + a10[x10[i]]
                 + a11[x11[i]]
    }
    Sigma ~ dunif( nYlevels/1000 , nYlevels*10 )
    a0 ~ dnorm( yMean , 1/(ySD*5)^2 ) 
    #
    for ( j1 in 1:Nx1Lvl ) { a1[j1] ~ dnorm( 0.0 , 1/a1SD^2 ) }
    a1SD ~ dgamma(agammaShRa[1],agammaShRa[2]) # or try a folded t (Cauchy)
    #
    for ( j2 in 1:Nx2Lvl ) { a2[j2] ~ dnorm( 0.0 , 1/a2SD^2 ) }
    a2SD ~ dgamma(agammaShRa[1],agammaShRa[2]) # or try a folded t (Cauchy)
    #
    for ( j3 in 1:Nx3Lvl ) { a3[j3] ~ dnorm( 0.0 , 1/a3SD^2 ) }
    a3SD ~ dgamma(agammaShRa[1],agammaShRa[2]) # or try a folded t (Cauchy)
    #
    for ( j4 in 1:Nx4Lvl ) { a4[j4] ~ dnorm( 0.0 , 1/a4SD^2 ) }
    a4SD ~ dgamma(agammaShRa[1],agammaShRa[2]) # or try a folded t (Cauchy)
    #
    for ( j5 in 1:Nx5Lvl ) { a5[j5] ~ dnorm( 0.0 , 1/a5SD^2 ) }
    a5SD ~ dgamma(agammaShRa[1],agammaShRa[2]) # or try a folded t (Cauchy)
    #
    for ( j6 in 1:Nx6Lvl ) { a6[j6] ~ dnorm( 0.0 , 1/a6SD^2 ) }
    a6SD ~ dgamma(agammaShRa[1],agammaShRa[2]) # or try a folded t (Cauchy)
    #
    for ( j7 in 1:Nx7Lvl ) { a7[j7] ~ dnorm( 0.0 , 1/a7SD^2 ) }
    a7SD ~ dgamma(agammaShRa[1],agammaShRa[2]) # or try a folded t (Cauchy)
    #
    for ( j8 in 1:Nx8Lvl ) { a8[j8] ~ dnorm( 0.0 , 1/a8SD^2 ) }
    a8SD ~ dgamma(agammaShRa[1],agammaShRa[2]) # or try a folded t (Cauchy)
    #
    for ( j9 in 1:Nx9Lvl ) { a9[j9] ~ dnorm( 0.0 , 1/a9SD^2 ) }
    a9SD ~ dgamma(agammaShRa[1],agammaShRa[2]) # or try a folded t (Cauchy)
    #
    for ( j10 in 1:Nx10Lvl ) { a10[j10] ~ dnorm( 0.0 , 1/a10SD^2 ) }
    a10SD ~ dgamma(agammaShRa[1],agammaShRa[2]) # or try a folded t (Cauchy)
    #
    for ( j11 in 1:Nx11Lvl ) { a11[j11] ~ dnorm( 0.0 , 1/a11SD^2 ) }
    a11SD ~ dgamma(agammaShRa[1],agammaShRa[2]) # or try a folded t (Cauchy)
    #
    
    # Convert a0,a1[],a2[] to sum-to-zero b0,b1[],b2[] :
    for ( j1 in 1:Nx1Lvl ) {
      for ( j11 in 1:Nx11Lvl ) {
        # m[j1,j11] <- a0 + a1[j1] + a2[j2] + a3[j3] + a4[j4] + a5[j5] + a6[j6] + a7[j7]+ a8[j8] + a9[j9] + a10[j10] + a11[j11] # cell means 
        m[j1,j11] <- sum(a0 + a1[j1], a2[j2], a3[j3], a4[j4], a5[j5], a6[j6], a7[j7], a8[j8], a9[j9], a10[j10], a11[j11], na.rm = TRUE)
      }
    }
    b0 <- mean( 1:Nx1Lvl,1:Nx2Lvl] )
    for ( j1 in 1:Nx1Lvl ) { b1[j1] <- mean( m[j1,1:Nx2Lvl] ) - b0 }
    for ( j2 in 1:Nx2Lvl ) { b2[j2] <- mean( m[1:Nx2Lvl,j2] ) - b0 }
    for ( j3 in 1:Nx3Lvl ) { b3[j3] <- mean( m[1:Nx3Lvl,j3] ) - b0 }
    for ( j4 in 1:Nx4Lvl ) { b4[j4] <- mean( m[1:Nx4Lvl,j4] ) - b0 }
    for ( j5 in 1:Nx5Lvl ) { b5[j5] <- mean( m[1:Nx5Lvl,j5] ) - b0 }
    for ( j6 in 1:Nx6Lvl ) { b6[j6] <- mean( m[1:Nx6Lvl,j6] ) - b0 }
    for ( j7 in 1:Nx7Lvl ) { b7[j7] <- mean( m[1:Nx7Lvl,j7] ) - b0 }
    for ( j8 in 1:Nx8Lvl ) { b8[j8] <- mean( m[1:Nx8Lvl,j8] ) - b0 }
    for ( j9 in 1:Nx9Lvl ) { b9[j9] <- mean( m[1:Nx9Lvl,j9] ) - b0 }
    for ( j10 in 1:Nx10Lvl ) { b10[j10] <- mean( m[1:Nx10Lvl,j10] ) - b0 }
    for ( j11 in 1:Nx11Lvl ) { b11[j11] <- mean( m[1:Nx11Lvl,j11] ) - b0 }
        
    for ( k in 2:(nYlevels-2) ) {  # 1 and nYlevels-1 are fixed
      thresh[k] ~ dnorm( k+0.5 , 1/2^2 )
    }
  }
  
