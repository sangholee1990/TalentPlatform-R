DM +
Dyslipid +
CKD +
PAD +
CHF +
PRE_MI +
PRE_PCI +
PRE_CVA +
VERI_PRU +
LVEF +
HB +
Cr +
LDL +
ACCAHA +
ASP +
CILO +
RASinh +
BB +
STATIN +
CHIP_CRITERIA, data = tempL1)
summary(ps_model)
match_it_obj <- matchit(CCB ~ Age +
Sex +
BMI +
Dx +
Smoking +
HTN +
DM +
Dyslipid +
CKD +
PAD +
CHF +
PRE_MI +
PRE_PCI +
PRE_CVA +
VERI_PRU +
LVEF +
HB +
Cr +
LDL +
ACCAHA +
ASP +
CILO +
RASinh +
BB +
STATIN +
CHIP_CRITERIA, data = tempL1, method = "quick", weights = "iptw", estimand = "ATT", model = ps_model)
match_it_obj <- matchit(CCB ~ Age +
Sex +
BMI +
Dx +
Smoking +
HTN +
DM +
Dyslipid +
CKD +
PAD +
CHF +
PRE_MI +
PRE_PCI +
PRE_CVA +
VERI_PRU +
LVEF +
HB +
Cr +
LDL +
ACCAHA +
ASP +
CILO +
RASinh +
BB +
STATIN +
CHIP_CRITERIA, data = tempL1, method = "quick", weights = "iptw", estimand = "ATT", model = ps_model)
match_it_obj
summary(match_it_obj)
# 가중치가 적용된 데이터를 얻습니다.
weighted_data <- match.data(match_it_obj)
# survival 객체를 생성합니다.
# 여기서는 time 변수가 생존 시간을, status 변수가 censoring 여부를 나타냅니다.
surv_obj <- Surv(time = weighted_data$time, event = weighted_data$status)
surv_obj
surv_obj
# survival 객체를 생성합니다.
# 여기서는 time 변수가 생존 시간을, status 변수가 censoring 여부를 나타냅니다.
surv_obj <- Surv(time = weighted_data$time, event = weighted_data$status)
# 가중치가 적용된 데이터를 얻습니다.
weighted_data <- match.data(match_it_obj)
weighted_data
weighted_data$time
weighted_data
temp$ipw = get.weights(p1, stop.method = "es.mean")
sum(temp$ipw)
data_iptw = merge(data, temp[, c("No", "ipw")], by = "No")
data_iptw
nrow(data_iptw)
weighteddata <- svydesign(ids = ~1, data = data_iptw, weights = ~ipw)
nrow(weighteddata)
weighted_data$CCB
# survival 객체를 생성합니다.
# 여기서는 time 변수가 생존 시간을, status 변수가 censoring 여부를 나타냅니다.
surv_obj <- Surv(time = weighted_data$CCB, event = weighted_data$status)
weighted_data$ipw
weighted_data
# 가중치가 적용된 데이터를 얻습니다.
s <- match.data(match_it_obj)
s
svycoxph
p1
ps_model = glm(CCB ~ Age +
Sex +
BMI +
Dx +
Smoking +
HTN +
DM +
Dyslipid +
CKD +
PAD +
CHF +
PRE_MI +
PRE_PCI +
PRE_CVA +
VERI_PRU +
LVEF +
HB +
Cr +
LDL +
ACCAHA +
ASP +
CILO +
RASinh +
BB +
STATIN +
CHIP_CRITERIA, data = tempL1)
p1 = ps(CCB ~ Age +
Sex +
BMI +
Dx +
Smoking +
HTN +
DM +
Dyslipid +
CKD +
PAD +
CHF +
PRE_MI +
PRE_PCI +
PRE_CVA +
VERI_PRU +
LVEF +
HB +
Cr +
LDL +
ACCAHA +
ASP +
CILO +
RASinh +
BB +
STATIN +
CHIP_CRITERIA, data = temp, stop.method = c("es.mean"), estimand = "ATE")
p1
library(MatchIt)
library(survival)
ps
ps
p1 = twang::ps(CCB ~ Age +
Sex +
BMI +
Dx +
Smoking +
HTN +
DM +
Dyslipid +
CKD +
PAD +
CHF +
PRE_MI +
PRE_PCI +
PRE_CVA +
VERI_PRU +
LVEF +
HB +
Cr +
LDL +
ACCAHA +
ASP +
CILO +
RASinh +
BB +
STATIN +
CHIP_CRITERIA, data = temp, stop.method = c("es.mean"), estimand = "ATE")
p1 = twang::ps(CCB ~ Age +
Sex +
BMI +
Dx +
Smoking +
HTN +
DM +
Dyslipid +
CKD +
PAD +
CHF +
PRE_MI +
PRE_PCI +
PRE_CVA +
VERI_PRU +
LVEF +
HB +
Cr +
LDL +
ACCAHA +
ASP +
CILO +
RASinh +
BB +
STATIN +
CHIP_CRITERIA, data = tempL1, stop.method = c("es.mean"), estimand = "ATE")
p1
temp$ipw = get.weights(p1, stop.method = "es.mean")
p1
temp$ipw = get.weights(p1, stop.method = "es.mean")
data <- read.csv(file = "./PTRG_DES_20220723_update.csv")
temp = data %>%
dplyr::select(c("No", "Age", "Sex", "BMI", "Dx", "AMI", "Smoking", "DM", "HTN", "Dyslipid", "CKD", "PAD", "CHF", "PRE_MI", "PRE_PCI", "PRE_CABG", "PRE_CVA", "VERI_PRU", "LVEF", "WBC", "HB", "PLATELET", "Cr", "TC", "TG", "HDL", "LDL", "hsCRP", "Hba1c", "ACCAHA", "TotalNoST", "Bifurcation", "CTO", "ASP", "CILO", "RASinh", "BB", "CCB", "STATIN", "PPI", "CHIP_CRITERIA"))
temp = data %>%
dplyr::select(c("No", "Age", "Sex", "BMI", "Dx", "AMI", "Smoking", "DM", "HTN", "Dyslipid", "CKD", "PAD", "CHF", "PRE_MI", "PRE_PCI", "PRE_CABG", "PRE_CVA", "VERI_PRU", "LVEF", "WBC", "HB", "PLATELET", "Cr", "TC", "TG", "HDL", "LDL", "hsCRP", "Hba1c", "ACCAHA", "TotalNoST", "Bifurcation", "CTO", "ASP", "CILO", "RASinh", "BB", "CCB", "STATIN", "PPI", "CHIP_CRITERIA")) %>%
dplyr::mutate(
CCB = as.integer(CCB)
) %>%
na.omit()
library(MatchIt)
library(survival)
p1 = twang::ps(CCB ~ Age +
Sex +
BMI +
Dx +
Smoking +
HTN +
DM +
Dyslipid +
CKD +
PAD +
CHF +
PRE_MI +
PRE_PCI +
PRE_CVA +
VERI_PRU +
LVEF +
HB +
Cr +
LDL +
ACCAHA +
ASP +
CILO +
RASinh +
BB +
STATIN +
CHIP_CRITERIA, data = temp, stop.method = c("es.mean"), estimand = "ATE")
temp$ipw = get.weights(p1, stop.method = "es.mean")
sum(temp$ipw)
data_iptw = merge(data, temp[, c("No", "ipw")], by = "No")
data_iptw
nrow(data_iptw)
weighteddata <- svydesign(ids = ~1, data = data_iptw, weights = ~ipw)
nrow(weighteddata)
summary(weighteddata)
# Weighted Table 1
xvars <- c("No", "ACCAHA", "MultivvDz", "Hba1c", "PRU_over208", "STATIN", "CILO", "CCB", "Age", "Sex", "BMI", "Dx", "AMI", "Smoking", "DM", "HTN", "Dyslipid", "CKD", "PAD", "CHF", "PRE_MI", "PRE_PCI", "PRE_CABG", "PRE_CVA", "VERI_PRU", "LVEF", "WBC", "HB", "PLATELET", "Cr", "TC", "TG", "HDL", "LDL", "TotalNoST", "ASP", "BB", "RASinh", "HBR_score", "CHIP_CRITERIA")
weightedtable <- svyCreateTableOne(vars = xvars, strata = "CCB", data = weighteddata, test = FALSE)
# Show Table with SMD
print(weightedtable, smd = TRUE)
##### IPTW table2 #####
cox.MACCE <- svycoxph(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
summary(cox.MACCE)
cox.death <- svycoxph(Surv(Death_d, CV_DEATH == 1) ~ CCB, design = weighteddata)
summary(cox.death)
cox.MI <- svycoxph(Surv(MI_d, TOTAL_MI == 1) ~ CCB, design = weighteddata)
summary(cox.MI)
cox.ST <- svycoxph(Surv(ST_d, ST_YN == 1) ~ CCB, design = weighteddata)
summary(cox.ST)
cox.CVA <- svycoxph(Surv(CVA_d, CVA == 1) ~ CCB, design = weighteddata)
summary(cox.CVA)
cox.RR <- svycoxph(Surv(RR_d, Revascularization == 1) ~ CCB, design = weighteddata)
summary(cox.RR)
cox.BL <- svycoxph(Surv(BL_day, BL_YN == 1) ~ CCB, design = weighteddata)
summary(cox.BL)
weighteddata <- svydesign(ids = ~1, data = data_iptw, weights = ~ipw)
nrow(weighteddata)
summary(weighteddata)
# Cox 비례 위험 모형 적합
fit <- svycoxph(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
summary(fit)
# Kaplan-Meier 곡선 그리기
ggsurvplot(survfit(fit), title = "Bleeding", data = weighteddata,
fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
# Show Table with SMD
print(weightedtable, smd = TRUE)
##### IPTW table2 #####
cox.MACCE <- svycoxph(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
summary(cox.MACCE)
cox.death <- svycoxph(Surv(Death_d, CV_DEATH == 1) ~ CCB, design = weighteddata)
summary(cox.death)
cox.MI <- svycoxph(Surv(MI_d, TOTAL_MI == 1) ~ CCB, design = weighteddata)
summary(cox.MI)
cox.ST <- svycoxph(Surv(ST_d, ST_YN == 1) ~ CCB, design = weighteddata)
summary(cox.ST)
cox.CVA <- svycoxph(Surv(CVA_d, CVA == 1) ~ CCB, design = weighteddata)
summary(cox.CVA)
cox.RR <- svycoxph(Surv(RR_d, Revascularization == 1) ~ CCB, design = weighteddata)
summary(cox.RR)
cox.BL <- svycoxph(Surv(BL_day, BL_YN == 1) ~ CCB, design = weighteddata)
summary(cox.BL)
weighteddata <- svydesign(ids = ~1, data = data_iptw, weights = ~ipw)
nrow(weighteddata)
summary(weighteddata)
# Cox 비례 위험 모형 적합
fit <- svycoxph(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
summary(fit)
# Kaplan-Meier 곡선 그리기
ggsurvplot(survfit(fit), title = "Bleeding", data = weighteddata,
fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
survfit(fit)
survfit(fit)
survfit(fit)
fit
# Kaplan-Meier 곡선 그리기
ggsurvplot(fit, title = "Bleeding", data = weighteddata,
fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
survfit(fit)
survfit(fit)
survfit(fit)
require("survival")
fit<- survfit(Surv(time, status) ~ sex, data = lung)
# Basic survival curves
ggsurvplot(fit, data = lung)
weighteddata
Surv(MACCE2_d, MACCE2 == 1) ~ CCB
Surv(MACCE2_d, MACCE2 == 1) ~ CCB
Surv(MACCE2_d, MACCE2 == 1) ~ CCB
Surv(time, status) ~ sex
Surv(time, status) ~ sex
Surv(time, status) ~ sex
Surv(time, status) ~ sex
Surv(MACCE2_d, MACCE2 == 1) ~ CCB
Surv(MACCE2_d, MACCE2 == 1) ~ CCB
fit = Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
fit = Surv(MACCE2_d, MACCE2 == 1)
MACCE2_d
MACCE2_d
weighteddata <- svydesign(ids = ~1, data = data_iptw, weights = ~ipw)
nrow(weighteddata)
summary(weighteddata)
# Cox 비례 위험 모형 적합
fit <- svycoxph(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
fit
summary(fit)
Surv(MACCE2_d, MACCE2 == 1)
Surv(MACCE2_d, MACCE2 == 1)
Surv(MACCE2_d, MACCE2 == 1)
weighteddata
fit = Surv(MACCE2_d, MACCE2 == 1, data = weighteddata)
fit = survfit(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, data = weighteddata)
fit = survfit(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, data = weighteddata)
fit = survfit(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata, data = weighteddata)
fit = survfit(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata, data = weighteddata)
fit = survfit(Surv(MACCE2_d, MACCE2 == 1)a, data = weighteddata)
fit = survfit(Surv(MACCE2_d, MACCE2 == 1), data = weighteddata)
svycoxph(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
# Cox 비례 위험 모형 적합
fit <- svycoxph(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
fit
fit<- survfit(Surv(time, status) ~ sex, data = lung)
fit
# Cox 비례 위험 모형 적합
fit <- svycoxph(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
# svykm 함수를 사용하여 Kaplan-Meier 곡선 계산하기
km_fit <- svykm(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
# survplot 함수를 사용하여 Kaplan-Meier 곡선 그리기
plot(km_fit, xlab = "Follow-up duration (days)", ylab = "Survival probability")
ggsurvplot(survfit(km_fit), title = "Bleeding", data = weighteddata,
fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
ggsurvplot(km_fit, title = "Bleeding", data = weighteddata,
fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
ggsurvplot(km_fit, title = "Bleeding", data = weighteddata,
fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
km_fit
ggsurvplot(km_fit, title = "Bleeding", data = weighteddata,
fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
fit<- survfit(Surv(time, status) ~ sex, data = lung)
fit
km_fit
km_fit <- survfit(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
ggsurvplot(km_fit, title = "Bleeding", data = weighteddata,
fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
# Cox 비례 위험 모형 적합
fit <- svycoxph(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
summary(fit)
fit
ggsurvplot(fit, title = "Bleeding", data = weighteddata,
fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
library(survminer)
# svycoxph를 통해 얻은 결과를 survfit 객체로 변환합니다.
fit_surv <- survfit(fit)
fit
# svycoxph를 통해 얻은 결과를 survfit 객체로 변환합니다.
fit_surv <- survfit(fit)
# ggsurvplot를 사용해 Kaplan-Meier 곡선을 그립니다.
ggsurvplot(fit_surv, data = weighteddata, risk.table = TRUE,
palette = c("gray 39", "orangered"), conf.int = FALSE,
xlab = "Follow-up duration (days)", ylim = c(0, 0.1),
fun = "cumhaz", title = "Bleeding", xlim = c(0, 1825),
break.time.by = 365, break.by = 0.05)
# svycoxph를 통해 얻은 결과를 survfit 객체로 변환합니다.
fit_surv <- survfit(fit)
survfit
survminer
# svycoxph를 통해 얻은 결과를 survfit 객체로 변환합니다.
fit_surv <- survminer::survfit(fit)
# svykm 함수를 사용하여 Kaplan-Meier 곡선 계산하기
km_fit <- svykm(Surv(MACCE2_d, MACCE2 == 1) ~ CCB, design = weighteddata)
# survplot 함수를 사용하여 Kaplan-Meier 곡선 그리기
plot(km_fit, xlab = "Follow-up duration (days)", ylab = "Survival probability")
# svycoxph를 통해 얻은 결과를 survfit 객체로 변환합니다.
fit_surv <- survminer::survfit(fit)
ggsurvplot(fit, title = "Bleeding", data = weighteddata,
fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
ggsurvplot(fit)
# create a survival object
Surv_obj <- Surv(data_iptw$MACCE2_d, data_iptw$MACCE2 == 1)
# fit a Cox model
fit_unweighted <- coxph(Surv_obj ~ CCB, data = data_iptw)
# create weights
weights <- ifelse(data_iptw$CCB == 1, 1 / temp$ipw, 1)
# fit a weighted Cox model
fit_weighted <- coxph(Surv_obj ~ CCB, data = data_iptw, weights = weights)
# generate Kaplan-Meier curves
kmfit_weighted <- survfit(fit_weighted)
kmfit_unweighted <- survfit(fit_unweighted)
# plot the weighted and unweighted Kaplan-Meier curves
ggsurvplot(list(weighted = kmfit_weighted, unweighted = kmfit_unweighted),
data = data_iptw, fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
# create a survival object
Surv_obj <- Surv(data_iptw$MACCE2_d, data_iptw$MACCE2 == 1)
# fit a Cox model
fit_unweighted <- coxph(Surv_obj ~ CCB, data = data_iptw)
# create weights
weights <- ifelse(data_iptw$CCB == 1, 1 / temp$ipw, 1)
# fit a weighted Cox modelhttp://127.0.0.1:30637/graphics/plot_zoom_png?width=1200&height=872
fit_weighted <- coxph(Surv_obj ~ CCB, data = data_iptw, weights = weights)
# generate Kaplan-Meier curves
kmfit_weighted <- survfit(fit_weighted)
kmfit_unweighted <- survfit(fit_unweighted)
# plot the weighted and unweighted Kaplan-Meier curves
ggsurvplot(list(weighted = kmfit_weighted, unweighted = kmfit_unweighted),
data = data_iptw, fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
ggsurvplot(survfit(fit_weighted),
data = data_iptw, fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
ggsurvplot(survfit(fit_weighted),
data = data_iptw, fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
ggsurvplot(survfit(kmfit_unweighted),
data = data_iptw, fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
# plot the weighted and unweighted Kaplan-Meier curves
ggsurvplot(list(weighted = kmfit_weighted, unweighted = kmfit_unweighted),
data = data_iptw, fun = "cumhaz", risk.table = TRUE, conf.int = FALSE,
palette = c("gray 39", "orangered"), xlim = c(0, 1825),
break.time.by = 365, xlab = "Follow-up duration (days)",
ylim = c(0, 0.1), break.by = 0.05)
